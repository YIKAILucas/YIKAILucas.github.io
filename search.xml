<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vim 常用快捷键</title>
      <link href="/vim-chang-yong-kuai-jie-jian/"/>
      <url>/vim-chang-yong-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<p>VIM常用命令</p><a id="more"></a><p>Referece:</p><p><a href="https://harttle.land/2015/11/07/vim-cursor.html#header-1" target="_blank" rel="noopener">Vim中如何快速进行光标移动</a><br><a href="https://blog.csdn.net/waxtear/article/details/104172445" target="_blank" rel="noopener">Vim命令理解和记忆</a><br><a href="https://spacevim.org/cn/documentation/" target="_blank" rel="noopener">SpaceVim 官方文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置VIM工作环境</title>
      <link href="/pei-zhi-vim-gong-zuo-huan-jing/"/>
      <url>/pei-zhi-vim-gong-zuo-huan-jing/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH保持链接不断开</title>
      <link href="/ssh-bao-chi-lian-jie-bu-duan-kai/"/>
      <url>/ssh-bao-chi-lian-jie-bu-duan-kai/</url>
      
        <content type="html"><![CDATA[<p>经常要通过学校的服务器上交作业, 但是经常登陆完几分钟不操作终端Terminal就卡住了，再也没法操作。</p><a id="more"></a><p><img src="https://vimeracke.oss-cn-shenzhen.aliyuncs.com/uPic/Kq6Par.png" alt="学校服务器"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>配置 ServerAliveInterval 实现，在 ~/.ssh/config 中加入ssh的间隔发送时间</p><p>ServerAliveInterval 30 #表示ssh客户端每隔30秒给远程主机发送一个no-op(No Operation)包，no-op是无任何操作，这样远程主机就不会关闭这个SSH会话，依靠这个包来维护ssh链接</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊数组和链表</title>
      <link href="/liao-liao-shu-zu-he-lian-biao/"/>
      <url>/liao-liao-shu-zu-he-lian-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。</p><p>常见的链表分为单链表、双向链表和循环链表</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>我们刚刚讲到，链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作后继指针 next。</p><p>我们知道，在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 O(n)。而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环链表是一种特殊的单链表。实际上，循环链表也很简单。它跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。从我画的循环链表图中，你应该可以看出来，它像一个环一样首尾相连，所以叫作“循环”链表。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。</p><p>从我画的图中可以看出来，双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。那相比单链表，双向链表适合解决哪种问题呢？从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。你可能会说，我刚讲到单链表的插入、删除操作的时间复杂度已经是 O(1) 了，双向链表还能再怎么高效呢？别着急，刚刚的分析比较偏理论，很多数据结构和算法书籍中都会这么讲，但是这种说法实际上是不准确的，或者说是有先决条件的。我再来带你分析一下链表的两个操作。我们先来看删除操作。在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：删除结点中“值等于某个给定值”的结点；删除给定指针指向的结点。对于第一种情况，不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。</p><p><img src="https://vimeracke.oss-cn-shenzhen.aliyuncs.com/uPic/hgeDHZ.jpg" alt="pwd"></p><p>因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式 Factory Pattern</title>
      <link href="/mei-tian-yi-ge-she-ji-mo-shi-zhi-gong-han-mo-shi-factory-pattern/"/>
      <url>/mei-tian-yi-ge-she-ji-mo-shi-zhi-gong-han-mo-shi-factory-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>Lucas 开了一家兵工厂，这个工厂生产手枪，坦克，飞机<br>生产坦克的流程包括钣金，冲压一系列流程</p><h2 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式 Simple Factory Pattern"></a>简单工厂模式 Simple Factory Pattern</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">create_weapon</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        model_module <span class="token operator">=</span> __import__<span class="token punctuation">(</span><span class="token string">'FactoryPattern'</span><span class="token punctuation">)</span>        weapon <span class="token operator">=</span> getattr<span class="token punctuation">(</span>model_module<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工厂创建了%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>weapon<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> weapon<span class="token keyword">class</span> <span class="token class-name">Weapon</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    @abstractmethod    <span class="token keyword">def</span> <span class="token function">show_power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Gun</span><span class="token punctuation">(</span>Weapon<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是手枪，我可以单兵作战'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span>Weapon<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是坦克，我提供炮火支援'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Helicopter</span><span class="token punctuation">(</span>Weapon<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是直升机，我提供空中侦察'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    gun <span class="token operator">=</span> Factory<span class="token punctuation">.</span>create_weapon<span class="token punctuation">(</span>Gun<span class="token punctuation">)</span>    gun<span class="token punctuation">.</span>show_power<span class="token punctuation">(</span><span class="token punctuation">)</span>    tank <span class="token operator">=</span> Factory<span class="token punctuation">.</span>create_weapon<span class="token punctuation">(</span>Tank<span class="token punctuation">)</span>    tank<span class="token punctuation">.</span>show_power<span class="token punctuation">(</span><span class="token punctuation">)</span>    helicopter <span class="token operator">=</span> Factory<span class="token punctuation">.</span>create_weapon<span class="token punctuation">(</span>Helicopter<span class="token punctuation">)</span>    helicopter<span class="token punctuation">.</span>show_power<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果</p><pre class=" language-markdown"><code class="language-markdown">工厂创建了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FactoryPattern.Gun</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x7ff0f0f27828</span><span class="token punctuation">></span></span>我是手枪，我可以单兵作战工厂创建了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FactoryPattern.Tank</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x7ff0f0f27860</span><span class="token punctuation">></span></span>我是坦克，我提供炮火支援工厂创建了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FactoryPattern.Helicopter</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x7ff0f0f27898</span><span class="token punctuation">></span></span>我是直升机，我提供空中侦察</code></pre><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>兵工厂现在接到了海军订单，要新增一个航母产品，建造航母的流程和原有的坦克直升机完全不一样，原有工厂的 create 逻辑不满足航母建造的要求，这时候发明了工厂方法模式，在原有工厂类上添加一个抽象类，具体工厂生产逻辑由子工厂实现。这样不管生产航母还是潜艇，都满足了开闭原则</p><h3 id="多工厂的工厂方法模式"><a href="#多工厂的工厂方法模式" class="headerlink" title="多工厂的工厂方法模式"></a>多工厂的工厂方法模式</h3><p>在工厂方法模式的基础上添加多个工厂类，每个工厂类和产品实现一对一，<br>每个产品对应一个工厂，这样职责清晰，但是复杂度很高，每个扩展的时候都要考虑工厂类和产品类之间的关系，所以在复杂的应用中常常添加一个协调类，用来封装子工厂</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>兵工厂现在又接到了海军陆战队的订单，现在的坦克，分成陆战常规版和海军陆战队专用版，海军陆战队的坦克需要实现抗腐蚀，高刚性，这时候工程师在原有的产品类上再添加一个抽象产品类，这就是抽象工厂模式</p><pre><code>from abc import ABCMeta, abstractmethodimport osimport sys'''抽象工厂模式'''class Factory:    @staticmethod    def create_weapon(cls):        model_module = __import__('AbstractFactory')        weapon = getattr(model_module, cls.__name__)()        print('工厂创建了%s' % (weapon))        return weaponclass Weapon(metaclass=ABCMeta):    @abstractmethod    def show_power(self):        passclass Tank(Weapon):    def show_power(self):        print('我是坦克，我提供炮火支援')    @abstractmethod    def show_painting(self):        passclass NavyTank(Tank):    def show_painting(self):        print('我是海军耐腐蚀涂装')class ArmyTank(Tank):    def show_painting(self):        print('我是陆军沙漠涂装')if __name__ == "__main__":    tank = Factory.create_weapon(ArmyTank)    tank.show_power()    tank.show_painting()    tank = Factory.create_weapon(NavyTank)    tank.show_power()    tank.show_painting()</code></pre><p>输出结果</p><pre class=" language-markdown"><code class="language-markdown">工厂创建了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AbstractFactory.ArmyTank</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x7ff7b6733c50</span><span class="token punctuation">></span></span>我是坦克，我提供炮火支援我是陆军沙漠涂装工厂创建了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AbstractFactory.NavyTank</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x7ff7b6733c88</span><span class="token punctuation">></span></span>我是坦克，我提供炮火支援我是海军耐腐蚀涂装</code></pre><p>抽象工厂是在工厂方法模式基础上在基础产品类上再封装一层，实现单一产品类的多级分类</p><p>抽象工厂模式适合横向扩展，不适合纵向扩展，如果再向下分级，模式会变得非常臃肿</p><h1 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结 Summary"></a>总结 Summary</h1><p>工厂模式是创造类模式，本质上就是为了把对象创建后的属性初始化等等操作封装在工厂类中，避免在业务代码中 new 完对象后，还要进行一大堆赋值等操作</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每天一个设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR逻辑斯蒂回归学习</title>
      <link href="/lr-luo-ji-si-di-hui-gui/"/>
      <url>/lr-luo-ji-si-di-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑斯蒂回归学习"><a href="#逻辑斯蒂回归学习" class="headerlink" title="逻辑斯蒂回归学习"></a>逻辑斯蒂回归学习</h1><p>逻辑斯蒂回归是经典的机器学习模型，记录一下我学习逻辑斯蒂回归的所得</p><a id="more"></a><h3 id="广义线性模型"><a href="#广义线性模型" class="headerlink" title="广义线性模型"></a>广义线性模型</h3><p>$$y = g^{-1} \bigl( w^Tx+b \bigr)$$</p><h3 id="logit-回归"><a href="#logit-回归" class="headerlink" title="logit 回归"></a>logit 回归</h3><p>$$\ln y= w^Tx+b$$</p><p>$$\ln \frac{y}{1-y}$$</p><p>将传统线性回归得到的实值$y = w^Tx+b$ 转换成 0/1 值</p><p>使用 sigmoid 函数$y=\frac{1}{1+e^{-z}}$进行转换<br>$$y=\frac{1}{1+e^{-\bigl( w^Tx+b \bigr)}}$$</p><p>所谓的对数几率回归就是让预测结果逼近$ln\frac{y}{1-y}$ , 即真实标记的对数几率<br>$y$是正例可能性，$1-y$是反例可能性<br>$\frac{y}{1-y}$就是正例的“相对可能性”：正例相对反例的概率</p><p>$$\frac{y}{1-y}= \frac{1}{1+e^{-z}} \cdot \frac{1+e^{-z}}{e^{-z}} =\frac{1}{e^{-z}}$$</p><p>$$\Rightarrow \ln\frac{y}{1-y} = \ln \frac{1}{e^{-z}}=\ln e^z=z$$</p><p>把$y$视为类后验概率$P(y=1|x)$，也就是正例的可能性<br>logit 回归就变成<br>$$\ln\frac{p(y=1|x)}{p(y=0|x)} = w^Tx+b$$</p><p>$$\Downarrow $$</p><p>$$p(y=1|x) = y=\frac{1}{1+e^{-\bigl( w^Tx+b \bigr)}} = \frac{1}{\frac{1+e^{w^Tx+b}}{e^{w^Tx+b}}}= \frac{e^{w^Tx+b}}{1+e^{w^Tx+b}} $$</p><p>$$p(y=0|x) = 1-y  = \frac{1}{1+e^{w^Tx+b}}$$</p><h3 id="极大似然法求解模型（Maximun-likelihood-estimation-MLE）"><a href="#极大似然法求解模型（Maximun-likelihood-estimation-MLE）" class="headerlink" title="极大似然法求解模型（Maximun likelihood estimation MLE）"></a>极大似然法求解模型（Maximun likelihood estimation MLE）</h3><p>通俗理解来说，就是利用已知的样本结果信息，反推最具有可能（最大概率）导致这些样本结果出现的模型参数值</p><p><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/u011508640/article/details/72815981">下面对 MLE 的内容来自这个博客</a></p><p>对于这个函数： $p(x|\theta)$ 输入有两个：$x$表示某一个具体的数据； $\theta$表示模型的参数</p><p>如果 $\theta$ 是已知确定的， $x$是变量，这个函数叫做概率函数(probability function)，它描述对于不同的样本点 $x$ ，其出现概率是多少。</p><p>如果 $x$ 是已知确定的， $\theta$是变量，这个函数叫做似然函数(likelihood function), 它描述对于不同的模型参数，出现$x$这个样本点的概率是多少。<br><a href="https://www.matongxue.com/madocs/447.html" target="_blank" rel="noopener">MLE 极大似然估计参考</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
  
</search>
